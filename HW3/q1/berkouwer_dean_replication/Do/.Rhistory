# library(here)
# library(XQuartz)
if (!require("groundhog")) install.packages("groundhog")
library(groundhog)
packages = c("ggplot2", "ggthemes", "extrafont", "gridExtra","car", "plyr","dplyr",
"readxl", "here", "XQuartz")
groundhog.library(packages, "2021-12-08", ignore.deps='generics')
loadfonts()
## Define Themes
my_theme_vert <- function(base_size = 16, base_family = "serif", ticks = TRUE) {
## TODO: start with theme_minimal
ret <- theme_bw(base_family = base_family, base_size = base_size) +
theme(legend.background = element_blank(),
legend.position="bottom",
legend.justification="center",
legend.direction="horizontal",
legend.key=element_blank(),
panel.grid = element_line(colour = NULL),
panel.border=element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
plot.background = element_blank(),
axis.line = element_blank(),
axis.ticks=element_blank(),
panel.grid.major.y = element_line(color = "#D2D2D2"),
panel.grid.major.x = element_blank(),
text=element_text(family="CMU Serif"))
if (!ticks) {
ret <- ret + theme(axis.ticks = element_blank())
}
ret
}
my_theme_horiz <- function(base_size = 20, base_family = "serif", ticks = TRUE) {
## TODO: start with theme_minimal
ret <- theme_bw(base_family = base_family, base_size = base_size) +
theme(legend.background = element_blank(),
legend.position="bottom",
legend.direction="horizontal",
legend.key=element_blank(),
legend.margin=unit(0,"cm"),
legend.key.size=unit(0.2,"cm"),
panel.grid = element_line(colour = NULL),
panel.border=element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
plot.background = element_blank(),
axis.title.y=element_blank(),
axis.line = element_blank(),
axis.ticks=element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.major.x = element_line(color = "#D2D2D2"),
text=element_text(family="CMU Serif"),
axis.text.y=element_text(hjust=0.5, margin=margin(r=-15)))
if (!ticks) {
ret <- ret + theme(axis.ticks = element_blank())
}
ret
}
my_pal <- function() {
function(n) {
colors <- c("#FF8554","#999083","#ffa200","#2EA7C4","#127289","#CE9C6E","#915722", "#993763", "#FFCB2B")
unname(colors[seq_len(n)])
}
}
my_scale_fill <- function(palette="fill",...) {
discrete_scale("fill", "my", my_pal(), ...)
}
my_scale_color <- function(palette="colour",...) {
discrete_scale("colour", "my", my_pal(), ...)
}
####### Quantile Graphs #########
datfile <- here::here('Data', 'Med','QTE.xlsx')
dat <- read_excel(datfile, col_names=FALSE)
dat <- t(dat)
rownames(dat) <- NULL
QTE_dat <- data.frame(b=dat[,1],se=dat[,2])
QTE_dat <- QTE_dat %>%
mutate(ul=b+1.97*se, ll=b-1.96*se, quantile=seq(1,99,1))
# ggplot(QTE_dat,aes(x=quantile))+geom_line(aes(y=b),color="#FF8554",size=1)+geom_ribbon(aes(ymin=ll,ymax=ul),alpha=0.2)+
#   my_theme_vert()+labs(x="Quantile",y="Unconditional Local Quantile Treatment Effect")+
#   scale_y_continuous(breaks=seq(-1.5,1.5,.5))
#Martin's note: deleted my_theme_vert() because it crashed (Error in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
#polygon edge not found)
graph <- ggplot(QTE_dat,aes(x=quantile))+geom_line(aes(y=b),color="#FF8554",size=1)+geom_ribbon(aes(ymin=ll,ymax=ul),alpha=0.2)+
labs(x="Quantile",y="Unconditional Local Quantile Treatment Effect")+
scale_y_continuous(breaks=seq(-1.5,1.5,.5))
ggsave(graph, filename = here::here('results', 'Graphs',"Figure A12 - QTE.pdf"), width = 10, height = 7, device = cairo_pdf)
library(ggplot2)
library(ggthemes)
library(extrafont)
library(gridExtra)
library(car)
library(plyr)
library(dplyr)
require(readxl)
library(here)
loadfonts()
## Define Themes
my_theme_vert <- function(base_size = 16, base_family = "serif", ticks = TRUE) {
## TODO: start with theme_minimal
ret <- theme_bw(base_family = base_family, base_size = base_size) +
theme(legend.background = element_blank(),
legend.position="bottom",
legend.justification="center",
legend.direction="horizontal",
legend.key=element_blank(),
panel.grid = element_line(colour = NULL),
panel.border=element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
plot.background = element_blank(),
axis.line = element_blank(),
axis.ticks=element_blank(),
panel.grid.major.y = element_line(color = "#D2D2D2"),
panel.grid.major.x = element_blank(),
text=element_text(family="CMU Serif"))
if (!ticks) {
ret <- ret + theme(axis.ticks = element_blank())
}
ret
}
my_theme_horiz <- function(base_size = 20, base_family = "serif", ticks = TRUE) {
## TODO: start with theme_minimal
ret <- theme_bw(base_family = base_family, base_size = base_size) +
theme(legend.background = element_blank(),
legend.position="bottom",
legend.direction="horizontal",
legend.key=element_blank(),
legend.margin=unit(0,"cm"),
legend.key.size=unit(0.2,"cm"),
panel.grid = element_line(colour = NULL),
panel.border=element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
plot.background = element_blank(),
axis.title.y=element_blank(),
axis.line = element_blank(),
axis.ticks=element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.major.x = element_line(color = "#D2D2D2"),
text=element_text(family="CMU Serif"),
axis.text.y=element_text(hjust=0.5, margin=margin(r=-15)))
if (!ticks) {
ret <- ret + theme(axis.ticks = element_blank())
}
ret
}
my_pal <- function() {
function(n) {
colors <- c("#FF8554","#999083","#ffa200","#2EA7C4","#127289","#CE9C6E","#915722", "#993763", "#FFCB2B")
unname(colors[seq_len(n)])
}
}
my_scale_fill <- function(palette="fill",...) {
discrete_scale("fill", "my", my_pal(), ...)
}
my_scale_color <- function(palette="colour",...) {
discrete_scale("colour", "my", my_pal(), ...)
}
####### Quantile Graphs #########
datfile <- here::here('Data', 'Med','QTE.xlsx')
dat <- read_excel(datfile, col_names=FALSE)
dat <- t(dat)
rownames(dat) <- NULL
QTE_dat <- data.frame(b=dat[,1],se=dat[,2])
QTE_dat <- QTE_dat %>%
mutate(ul=b+1.97*se, ll=b-1.96*se, quantile=seq(1,99,1))
ggplot(QTE_dat,aes(x=quantile))+geom_line(aes(y=b),color="#FF8554",size=1)+geom_ribbon(aes(ymin=ll,ymax=ul),alpha=0.2)+
my_theme_vert()+labs(x="Quantile",y="Unconditional Local Quantile Treatment Effect")+
scale_y_continuous(breaks=seq(-1.5,1.5,.5))
install.packages("extrafont")
install.packages("extrafont")
install.package("cm-unicode")
install.packages("cm-unicode")
font_import()
library(extrafont)
font_import()
fonts()
font()
fonttable()
font_install("fontcm")
loadfonts()
fonts()
## Define Themes
my_theme_vert <- function(base_size = 16, base_family = "serif", ticks = TRUE) {
## TODO: start with theme_minimal
ret <- theme_bw(base_family = base_family, base_size = base_size) +
theme(legend.background = element_blank(),
legend.position="bottom",
legend.justification="center",
legend.direction="horizontal",
legend.key=element_blank(),
panel.grid = element_line(colour = NULL),
panel.border=element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
plot.background = element_blank(),
axis.line = element_blank(),
axis.ticks=element_blank(),
panel.grid.major.y = element_line(color = "#D2D2D2"),
panel.grid.major.x = element_blank())
if (!ticks) {
ret <- ret + theme(axis.ticks = element_blank())
}
ret
}
my_theme_horiz <- function(base_size = 20, base_family = "serif", ticks = TRUE) {
## TODO: start with theme_minimal
ret <- theme_bw(base_family = base_family, base_size = base_size) +
theme(legend.background = element_blank(),
legend.position="bottom",
legend.direction="horizontal",
legend.key=element_blank(),
legend.margin=unit(0,"cm"),
legend.key.size=unit(0.2,"cm"),
panel.grid = element_line(colour = NULL),
panel.border=element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
plot.background = element_blank(),
axis.title.y=element_blank(),
axis.line = element_blank(),
axis.ticks=element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.major.x = element_line(color = "#D2D2D2"),
text=element_text(family="CMU Serif"),
axis.text.y=element_text(hjust=0.5, margin=margin(r=-15)))
if (!ticks) {
ret <- ret + theme(axis.ticks = element_blank())
}
ret
}
my_pal <- function() {
function(n) {
colors <- c("#FF8554","#999083","#ffa200","#2EA7C4","#127289","#CE9C6E","#915722", "#993763", "#FFCB2B")
unname(colors[seq_len(n)])
}
}
my_scale_fill <- function(palette="fill",...) {
discrete_scale("fill", "my", my_pal(), ...)
}
my_scale_color <- function(palette="colour",...) {
discrete_scale("colour", "my", my_pal(), ...)
}
####### Quantile Graphs #########
datfile <- here::here('Data', 'Med','QTE.xlsx')
dat <- read_excel(datfile, col_names=FALSE)
dat <- t(dat)
rownames(dat) <- NULL
QTE_dat <- data.frame(b=dat[,1],se=dat[,2])
QTE_dat <- QTE_dat %>%
mutate(ul=b+1.97*se, ll=b-1.96*se, quantile=seq(1,99,1))
ggplot(QTE_dat,aes(x=quantile))+geom_line(aes(y=b),color="#FF8554",size=1)+geom_ribbon(aes(ymin=ll,ymax=ul),alpha=0.2)+
my_theme_vert()+labs(x="Quantile",y="Unconditional Local Quantile Treatment Effect")+
scale_y_continuous(breaks=seq(-1.5,1.5,.5))
rm(list=ls())
library(ggplot2)
library(ggthemes)
library(extrafont)
library(gridExtra)
library(car)
library(plyr)
library(dplyr)
require(readxl)
library(here)
## Define Themes
my_theme_vert <- function(base_size = 16, base_family = "serif", ticks = TRUE) {
## TODO: start with theme_minimal
ret <- theme_bw(base_family = base_family, base_size = base_size) +
theme(legend.background = element_blank(),
legend.position="bottom",
legend.justification="center",
legend.direction="horizontal",
legend.key=element_blank(),
panel.grid = element_line(colour = NULL),
panel.border=element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
plot.background = element_blank(),
axis.line = element_blank(),
axis.ticks=element_blank(),
panel.grid.major.y = element_line(color = "#D2D2D2"),
panel.grid.major.x = element_blank())
if (!ticks) {
ret <- ret + theme(axis.ticks = element_blank())
}
ret
}
my_theme_horiz <- function(base_size = 20, base_family = "serif", ticks = TRUE) {
## TODO: start with theme_minimal
ret <- theme_bw(base_family = base_family, base_size = base_size) +
theme(legend.background = element_blank(),
legend.position="bottom",
legend.direction="horizontal",
legend.key=element_blank(),
legend.margin=unit(0,"cm"),
legend.key.size=unit(0.2,"cm"),
panel.grid = element_line(colour = NULL),
panel.border=element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
plot.background = element_blank(),
axis.title.y=element_blank(),
axis.line = element_blank(),
axis.ticks=element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.major.x = element_line(color = "#D2D2D2"),
text=element_text(family="CMU Serif"),
axis.text.y=element_text(hjust=0.5, margin=margin(r=-15)))
if (!ticks) {
ret <- ret + theme(axis.ticks = element_blank())
}
ret
}
my_pal <- function() {
function(n) {
colors <- c("#FF8554","#999083","#ffa200","#2EA7C4","#127289","#CE9C6E","#915722", "#993763", "#FFCB2B")
unname(colors[seq_len(n)])
}
}
my_scale_fill <- function(palette="fill",...) {
discrete_scale("fill", "my", my_pal(), ...)
}
my_scale_color <- function(palette="colour",...) {
discrete_scale("colour", "my", my_pal(), ...)
}
####### Quantile Graphs #########
datfile <- here::here('Data', 'Med','QTE.xlsx')
dat <- read_excel(datfile, col_names=FALSE)
dat <- t(dat)
rownames(dat) <- NULL
QTE_dat <- data.frame(b=dat[,1],se=dat[,2])
QTE_dat <- QTE_dat %>%
mutate(ul=b+1.97*se, ll=b-1.96*se, quantile=seq(1,99,1))
ggplot(QTE_dat,aes(x=quantile))+geom_line(aes(y=b),color="#FF8554",size=1)+geom_ribbon(aes(ymin=ll,ymax=ul),alpha=0.2)+
my_theme_vert()+labs(x="Quantile",y="Unconditional Local Quantile Treatment Effect")+
scale_y_continuous(breaks=seq(-1.5,1.5,.5))
ggsave(graph, filename = here::here('Results', 'Figures',"FigureA12_QTE.pdf"), width = 10, height = 7, device = cairo_pdf)
graph <- ggplot(QTE_dat,aes(x=quantile))+geom_line(aes(y=b),color="#FF8554",size=1)+geom_ribbon(aes(ymin=ll,ymax=ul),alpha=0.2)+
my_theme_vert()+labs(x="Quantile",y="Unconditional Local Quantile Treatment Effect")+
scale_y_continuous(breaks=seq(-1.5,1.5,.5))
#Martin's note: deleted my_theme_vert() because it crashed (Error in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
#polygon edge not found)
# graph <- ggplot(QTE_dat,aes(x=quantile))+geom_line(aes(y=b),color="#FF8554",size=1)+geom_ribbon(aes(ymin=ll,ymax=ul),alpha=0.2)+
#   labs(x="Quantile",y="Unconditional Local Quantile Treatment Effect")+
#   scale_y_continuous(breaks=seq(-1.5,1.5,.5))
ggsave(graph, filename = here::here('Results', 'Figures',"FigureA12_QTE.pdf"), width = 10, height = 7, device = cairo_pdf)
######## Make Cookstoves Graphs ##########
##Preliminaries
rm(list=ls())
# library(ggplot2)
# library(ggthemes)
# library(extrafont)
# library(gridExtra)
# library(car)
# library(plyr)
# library(dplyr)
# require(readxl)
# library(here)
# library(XQuartz) #Only for Mac.
# library(groundhog)
#
# packages = c("ggplot2", "ggthemes", "extrafont", "gridExtra","car", "plyr","dplyr",
#              "readxl", "here", "XQuartz")
#
# groundhog.library(packages, "2021-12-08", ignore.deps='generics')
loadfonts()
## Define Themes
my_theme_vert <- function(base_size = 16, base_family = "serif", ticks = TRUE) {
## TODO: start with theme_minimal
ret <- theme_bw(base_family = base_family, base_size = base_size) +
theme(legend.background = element_blank(),
legend.position="bottom",
legend.justification="center",
legend.direction="horizontal",
legend.key=element_blank(),
panel.grid = element_line(colour = NULL),
panel.border=element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
plot.background = element_blank(),
axis.line = element_blank(),
axis.ticks=element_blank(),
panel.grid.major.y = element_line(color = "#D2D2D2"),
panel.grid.major.x = element_blank())
if (!ticks) {
ret <- ret + theme(axis.ticks = element_blank())
}
ret
}
my_pal <- function() {
function(n) {
colors <- c("#FF8554","#999083","#ffa200","#2EA7C4","#127289","#CE9C6E","#915722", "#993763", "#FFCB2B")
unname(colors[seq_len(n)])
}
}
my_scale_fill <- function(palette="fill",...) {
discrete_scale("fill", "my", my_pal(), ...)
}
my_scale_color <- function(palette="colour",...) {
discrete_scale("colour", "my", my_pal(), ...)
}
####### Quantile Graphs #########
datfile <- here::here('Data', 'Med','QTE.xlsx')
dat <- read_excel(datfile, col_names=FALSE)
dat <- t(dat)
rownames(dat) <- NULL
QTE_dat <- data.frame(b=dat[,1],se=dat[,2])
QTE_dat <- QTE_dat %>%
mutate(ul=b+1.97*se, ll=b-1.96*se, quantile=seq(1,99,1))
# ggplot(QTE_dat,aes(x=quantile))+geom_line(aes(y=b),color="#FF8554",size=1)+geom_ribbon(aes(ymin=ll,ymax=ul),alpha=0.2)+
#   my_theme_vert()+labs(x="Quantile",y="Unconditional Local Quantile Treatment Effect")+
#   scale_y_continuous(breaks=seq(-1.5,1.5,.5))
#Martin's note: deleted my_theme_vert() because it crashed (Error in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
#polygon edge not found)
graph <- ggplot(QTE_dat,aes(x=quantile))+geom_line(aes(y=b),color="#FF8554",size=1)+geom_ribbon(aes(ymin=ll,ymax=ul),alpha=0.2)+
my_theme_vert() + labs(x="Quantile",y="Unconditional Local Quantile Treatment Effect")+
scale_y_continuous(breaks=seq(-1.5,1.5,.5))
ggsave(graph, filename = here::here('Results', 'Figures',"FigureA12_QTE.pdf"), width = 10, height = 7, device = cairo_pdf)
######## Make Cookstoves Graphs ##########
##Preliminaries
rm(list=ls())
# library(ggplot2)
# library(ggthemes)
# library(extrafont)
# library(gridExtra)
# library(car)
# library(plyr)
# library(dplyr)
# require(readxl)
# library(here)
# library(XQuartz) #Only for Mac.
# library(groundhog)
#
# packages = c("ggplot2", "ggthemes", "extrafont", "gridExtra","car", "plyr","dplyr",
#              "readxl", "here", "XQuartz")
#
# groundhog.library(packages, "2021-12-08", ignore.deps='generics')
loadfonts()
## Define Themes
my_theme_vert <- function(base_size = 16, base_family = "serif", ticks = TRUE) {
## TODO: start with theme_minimal
ret <- theme_bw(base_family = base_family, base_size = base_size) +
theme(legend.background = element_blank(),
legend.position="bottom",
legend.justification="center",
legend.direction="horizontal",
legend.key=element_blank(),
panel.grid = element_line(colour = NULL),
panel.border=element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
plot.background = element_blank(),
axis.line = element_blank(),
axis.ticks=element_blank(),
panel.grid.major.y = element_line(color = "#D2D2D2"),
panel.grid.major.x = element_blank())
if (!ticks) {
ret <- ret + theme(axis.ticks = element_blank())
}
ret
}
my_pal <- function() {
function(n) {
colors <- c("#FF8554","#999083","#ffa200","#2EA7C4","#127289","#CE9C6E","#915722", "#993763", "#FFCB2B")
unname(colors[seq_len(n)])
}
}
my_scale_fill <- function(palette="fill",...) {
discrete_scale("fill", "my", my_pal(), ...)
}
my_scale_color <- function(palette="colour",...) {
discrete_scale("colour", "my", my_pal(), ...)
}
####### Quantile Graphs #########
datfile <- here::here('Data', 'Med','QTE.xlsx')
dat <- read_excel(datfile, col_names=FALSE)
dat <- t(dat)
rownames(dat) <- NULL
QTE_dat <- data.frame(b=dat[,1],se=dat[,2])
QTE_dat <- QTE_dat %>%
mutate(ul=b+1.97*se, ll=b-1.96*se, quantile=seq(1,99,1))
# ggplot(QTE_dat,aes(x=quantile))+geom_line(aes(y=b),color="#FF8554",size=1)+geom_ribbon(aes(ymin=ll,ymax=ul),alpha=0.2)+
#   my_theme_vert()+labs(x="Quantile",y="Unconditional Local Quantile Treatment Effect")+
#   scale_y_continuous(breaks=seq(-1.5,1.5,.5))
#Martin's note: deleted my_theme_vert() because it crashed (Error in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
#polygon edge not found)
graph <- ggplot(QTE_dat,aes(x=quantile))+geom_line(aes(y=b),color="#FF8554",size=1)+geom_ribbon(aes(ymin=ll,ymax=ul),alpha=0.2)+
my_theme_vert() + labs(x="Quantile",y="Unconditional Local Quantile Treatment Effect")+
scale_y_continuous(breaks=seq(-1.5,1.5,.5))
ggsave(graph, filename = here::here('Results', 'Figures',"FigureA12_QTE.pdf"), width = 10, height = 7, device = cairo_pdf)
library(extrafont)
font_import()
library(remotes)
remotes::install_version("Rttf2pt1", version = "1.3.8")
remotes::install_version("Rttf2pt1", version = "1.3.8")
extrafont::font_import()
install.packages("MASS")
#Note: run this code after 1.run_stata.do
if (!require("groundhog")) install.packages("groundhog")
library(groundhog)
groundhog.library("here", "2021-12-08", ignore.deps='generics')
if (!require("groundhog")) install.packages("groundhog")
library(groundhog)
library(generics)
groundhog.library("here", "2021-12-08", ignore.deps='generics')
#First, point to your Windows Ghostcript installation.
#(This is needed to use the "CM Roman" font in Figures A12 and 13.)
#(This has been tested in Windows only.)
#ghostscript_path = "C:/Program Files/gs/gs9.53.3/bin/gswin64c"
#Sys.setenv(R_GSCMD = ghostscript_path)
source(here::here('Do/setup_R.R')) #Installs all needed packages.
